'use client';

import { useState, useRef, useEffect, useCallback } from 'react';
import { DataTable } from 'primereact/datatable';
import { Column } from 'primereact/column';
import { Toast } from 'primereact/toast';
import { Button } from 'primereact/button';
import { Dropdown } from 'primereact/dropdown';
import { API_ENDPOINTS } from '@/app/api/api';

export default function MutasiTerimaDataPage() {
  const toastRef = useRef(null);
  const [fakturKirim, setFakturKirim] = useState(null);
  const [fakturOptions, setFakturOptions] = useState([]);
  const [terimaData, setTerimaData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [loadingFaktur, setLoadingFaktur] = useState(false);
  const [fakturList, setFakturList] = useState([]);

  useEffect(() => {
    fetchPendingFaktur();
  }, []);

  const fetchPendingFaktur = async () => {
    setLoadingFaktur(true);
    try {
      const res = await fetch(`/api/mutasi/create/pending`);
      const json = await res.json();

      if (json.status === "00" && Array.isArray(json.data)) {
        const options = json.data.map((item) => ({
          label: `${item.faktur} - ${new Date(item.tgl).toLocaleDateString('id-ID')}`,
          value: item.faktur,
        }));
        setFakturOptions(options);
        setTerimaData(json.data); // tampilkan data di tabel

        if (options.length === 0) {
          toastRef.current?.show({
            severity: 'info',
            summary: 'Info',
            detail: 'Tidak ada faktur pending',
            life: 3000
          });
        }
      } else {
        toastRef.current?.show({
          severity: 'warn',
          summary: 'Warning',
          detail: json.message || 'Data tidak ditemukan',
          life: 3000
        });
      }
    } catch (err) {
      console.error('Fetch error:', err);
      toastRef.current?.show({
        severity: 'error',
        summary: 'Error',
        detail: 'Gagal ambil faktur pending',
        life: 3000
      });
    } finally {
      setLoadingFaktur(false);
    }
  };

  const fetchByFaktur = async (selectedFaktur) => {
    if (!selectedFaktur) return;

    setLoading(true);
    try {
      const res = await fetch(`/api/mutasi/receive/${selectedFaktur}`);
      const json = await res.json();

      if (json.status === '00') {
        setTerimaData([json.data]); // tampilkan satu faktur
      } else {
        setTerimaData([]);
        toastRef.current?.show({
          severity: 'info',
          summary: 'Info',
          detail: json.message || 'Data tidak ditemukan',
          life: 3000
        });
      }
    } catch (err) {
      console.error('Fetch error:', err);
      toastRef.current?.show({
        severity: 'error',
        summary: 'Error',
        detail: 'Gagal mengambil data',
        life: 3000
      });
    } finally {
      setLoading(false);
    }
  };
  const  fetchFakturList = useCallback(async () => {
    try {
      const res = await fetch("/api/mutasi/create/pending");
      const json = await res.json();
      if (json.status === "00") {
        setFakturList(json.data.map(item => ({
          FAKTUR: item.FAKTUR,
          TGL: item.TGL
        })));
      }
    } catch (error) {
      console.error(error);
      toast.current?.show({ severity: 'error', summary: 'Error', detail: 'Gagal Ambil Data Mutasi', life: 3000})
    }
  },[])

  useEffect (() => {
    fetchFakturList();
  },[])

  const handleTerimaRow = async (rowData) => {
    const faktur = rowData.faktur;

    try {
      const res = await fetch(`/api/mutasi/receive/${faktur}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(rowData) // body sesuai controller backend
      });

      const json = await res.json();

      if (json.status === '00') {
        toastRef.current?.show({
          severity: 'success',
          summary: 'Success',
          detail: json.message,
          life: 3000
        });
        fetchPendingFaktur(); // refresh data tabel
      } else {
        toastRef.current?.show({
          severity: 'error',
          summary: 'Error',
          detail: json.message || 'Gagal menerima mutasi',
          life: 3000
        });
      }
    } catch (err) {
      console.error('Error confirm receive mutasi:', err);
      toastRef.current?.show({
        severity: 'error',
        summary: 'Error',
        detail: 'Gagal menerima mutasi',
        life: 3000
      });
    }
  };

  return (
    <div className="card">
      <Toast ref={toastRef} />
      <h2 className="text-xl font-bold mb-4">Terima Barang Berdasarkan Faktur Kirim</h2>

      <div className="flex gap-2 mb-4 items-center">
        <Dropdown
          value={fakturKirim}
          options={fakturOptions}
          onChange={(e) => {
            setFakturKirim(e.value);
            fetchByFaktur(e.value);
          }}
          placeholder="Pilih Faktur Pending"
          className="w-72"
        />
        <Button
          label="Refresh Faktur Pending"
          icon="pi pi-refresh"
          loading={loadingFaktur}
          onClick={fetchPendingFaktur}
        />
      </div>

      <DataTable
        size="small"
        value={terimaData}
        loading={loading}
        paginator
        rows={10}
        emptyMessage="Tidak ada data untuk ditampilkan"
      >
        <Column field="faktur" header="Faktur" />
        <Column field="nama" header="Nama" />
        <Column field="tgl" header="Tanggal" />
        <Column field="gudang_kirim" header="Gudang Kirim" />
        <Column field="gudang_terima" header="Gudang Terima" />
        <Column field="barcode" header="Barcode" />
        <Column field="qty" header="Qty" />
        <Column field="satuan" header="Satuan" />
        <Column field="username" header="User Kirim" />
        <Column field="status" header="Status" />

        {/* Kolom Action */}
        <Column
          header="Action"
          body={(rowData) => (
            <Button
              label="Terima"
              icon="pi pi-check"
              className="p-button-success"
              disabled={rowData.status !== 'pending'}
              onClick={() => handleTerimaRow(rowData)}
            />
          )}
        />
      </DataTable>
    </div>
  );
}
